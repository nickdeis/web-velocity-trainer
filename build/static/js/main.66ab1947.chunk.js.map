{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["rand","Math","random","testEvent","x","y","z","event","DeviceMotionEvent","acceleration","interval","window","dispatchEvent","a","cnt","idx","setInterval","clearInterval","Plotly","newPlot","type","mode","opacity","line","width","height","test","App","useState","eventLog","updateEvents","useEffect","initPlot","addEventListener","timestamp","Date","now","newEventLog","concat","requestAnimationFrame","extendTraces","updatePlot","id","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QAQA,SAASA,IACP,OAAuB,GAAhBC,KAAKC,SAWd,SAASC,IACP,IAAMC,EAAIJ,IACJK,EAAIL,IACJM,EAAIN,IACJO,EAAQ,IAAIC,kBAAkB,eAAe,CAACC,aAAa,CAACL,IAAEC,IAAEC,KAAGI,SAAS,KAClFC,OAAOC,cAAcL,G,4CAGvB,8BAAAM,EAAA,sDAEMC,EAAM,EACVC,EAAMC,aAAY,WAChBb,MACAW,EACS,KACPG,cAAcF,KAEhB,IATJ,4C,kEA8BA,sBAAAF,EAAA,sDACEK,OAAOC,QACL,OACA,CACE,CACEC,KAAM,YACNC,KAAM,QACNjB,EAAG,CAAC,GACJC,EAAG,CAAC,GACJC,EAAG,CAAC,GACJgB,QAAS,EACTC,KAAM,CACJC,MAAO,KAIb,CACEC,OAAQ,MAjBd,4C,sBAlBAd,OAAOe,K,2CA8DQC,MAtBf,WAAgB,IAAD,EACoBC,mBAAkB,IADtC,mBACNC,EADM,KACIC,EADJ,KAmBb,OAjBAC,qBAAU,Y,mCACRC,GACArB,OAAOsB,iBAAiB,gBAAgB,YAA8B,IAA5BxB,EAA2B,EAA3BA,aAA2B,EAAdC,SACrD,GAAGD,EAAa,CACd,IAAMyB,EAAaC,KAAKC,MAClBhC,GAAgB,OAAZK,QAAY,IAAZA,OAAA,EAAAA,EAAcL,IAAK,EACvBC,GAAgB,OAAZI,QAAY,IAAZA,OAAA,EAAAA,EAAcJ,IAAK,EACvBC,GAAgB,OAAZG,QAAY,IAAZA,OAAA,EAAAA,EAAcH,IAAK,EAC7B,IAAIF,IAAMC,IAAMC,EACd,OAEF,IAAM+B,EAAcR,EAASS,OAAO,CAAC,CAAClC,IAAEC,IAAEC,IAAE4B,eAC5CJ,EAAaO,GA7CrB,SAAoBjC,EAASC,EAASC,GACjCY,QACDqB,uBAAsB,WACpBrB,OAAOsB,aAAa,OAAO,CAACpC,EAAE,CAAC,CAACA,IAAIC,EAAE,CAAC,CAACA,IAAIC,EAAE,CAAC,CAACA,KAAK,CAAC,OA2CpDmC,CAAWrC,EAAEC,EAAEC,SAGnB,IACK,8BAAK,qBAAKoC,GAAG,YCvFFC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YEpH5BtB,M","file":"static/js/main.66ab1947.chunk.js","sourcesContent":["import React, { useState, useEffect} from \"react\";\r\nimport \"./App.css\";\r\nimport {debounce} from 'lodash';\r\n\r\n\r\ndeclare const Plotly:any;\r\n\r\n\r\nfunction rand(){\r\n  return Math.random() * 10;\r\n}\r\n\r\nfunction wait(t:number){\r\n  return new Promise((resolve,reject) => {\r\n    setTimeout(() => {\r\n      resolve(true);\r\n    },t)\r\n  })  \r\n}\r\n\r\nfunction testEvent(){\r\n  const x = rand();\r\n  const y = rand();\r\n  const z = rand();\r\n  const event = new DeviceMotionEvent('devicemotion',{acceleration:{x,y,z},interval:16})\r\n  window.dispatchEvent(event);\r\n}\r\n\r\nasync function test(){\r\n  let idx:any;\r\n  let cnt = 0;\r\n  idx = setInterval(() => {\r\n    testEvent();\r\n    cnt++\r\n    if(cnt > 100){\r\n      clearInterval(idx);\r\n    }\r\n  },16)\r\n}\r\n//@ts-ignore\r\nwindow.test = test;\r\n\r\ntype Event = {\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  timestamp: number;\r\n};\r\n\r\nfunction updatePlot(x:number,y:number,z:number){\r\n  if(Plotly){\r\n    requestAnimationFrame(() => {\r\n      Plotly.extendTraces('plot',{x:[[x]],y:[[y]],z:[[z]]},[0]);\r\n    });\r\n    \r\n  }\r\n}\r\n\r\nasync function initPlot() {\r\n  Plotly.newPlot(\r\n    \"plot\",\r\n    [\r\n      {\r\n        type: \"scatter3d\",\r\n        mode: \"lines\",\r\n        x: [0],\r\n        y: [0],\r\n        z: [0],\r\n        opacity: 1,\r\n        line: {\r\n          width: 6,\r\n        }\r\n      }\r\n    ],\r\n    {\r\n      height: 640\r\n    }\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [eventLog, updateEvents] = useState<Event[]>([]);\r\n  useEffect(() => {\r\n    initPlot()\r\n    window.addEventListener('devicemotion', ({acceleration,interval}) => {\r\n      if(acceleration){\r\n        const timestamp =  Date.now();\r\n        const x = acceleration?.x || 0;\r\n        const y = acceleration?.y || 0;\r\n        const z = acceleration?.z || 0;\r\n        if(!x && !y && !z){\r\n          return;\r\n        }\r\n        const newEventLog = eventLog.concat([{x,y,z,timestamp}])\r\n        updateEvents(newEventLog);\r\n        updatePlot(x,y,z);\r\n      }\r\n    });\r\n  },[]);\r\n  return <div><div id=\"plot\"></div></div>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}